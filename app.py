# Import necessary libraries
import os
import json
import base64
from io import BytesIO 
import re 

from flask import Flask, request, jsonify, render_template, send_from_directory, send_file
import openai
from werkzeug.utils import secure_filename

# Import ReportLab for PDF generation
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.pagesizes import A4, portrait
from reportlab.lib.units import inch
from reportlab.lib.enums import TA_CENTER, TA_LEFT

# Import platform to check OS for font path (optional, for local development specific fonts)
import platform

# Initialize the Flask application
app = Flask(__name__, template_folder='templates', static_folder='static')

# Define the folder for uploading images (primarily for historical reference or direct serving if needed)
UPLOAD_FOLDER = 'static/uploads'
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

# Configure OpenAI API client
try:
    client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
    print("DEBUG: OpenAI client initialized successfully.")
except Exception as e:
    print(f"DEBUG ERROR: Failed to initialize OpenAI client: {e}")
    client = None

# Define the application password
APP_PASSWORD = "360estate"

# --- Routes for the application ---

@app.route('/')
def index():
    return render_template('login.html')

@app.route('/login', methods=['POST'])
def login():
    password = request.form.get("password")
    if password == APP_PASSWORD:
        return render_template('form.html')
    else:
        return render_template('login.html', error=True)

@app.route('/generate', methods=['POST'])
def generate_ad():
    print("DEBUG: generate_ad route hit!")

    # Parse JSON data from the request
    data = request.json
    
    # Extract text fields
    form_data = {
        'property_type': data.get('property_type', '–ê–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç'), # New field
        'location': data.get('location', '–Ω–µ—É—Ç–æ—á–Ω–µ–Ω–∞'),
        'price': data.get('price', '–Ω–µ—É—Ç–æ—á–Ω–µ–Ω–∞'),
        'area': data.get('area', '–Ω–µ—É—Ç–æ—á–Ω–µ–Ω–∞'),
        'floor': data.get('floor', '–Ω–µ—É—Ç–æ—á–Ω–µ–Ω'),
        'year_built': data.get('year_built', '–Ω–µ—É—Ç–æ—á–Ω–µ–Ω–∞'),
        'installment': data.get('installment', '–Ω–µ—É—Ç–æ—á–Ω–µ–Ω–∞'),
        'furnishing': data.get('furnishing', '–Ω–µ—É—Ç–æ—á–Ω–µ–Ω–æ'),
        'panorama': data.get('panorama', '–Ω–µ—É—Ç–æ—á–Ω–µ–Ω–∞'),
        'elevator': data.get('elevator', '–Ω–µ—É—Ç–æ—á–Ω–µ–Ω'),
        'garage': data.get('garage', '–Ω–µ—É—Ç–æ—á–Ω–µ–Ω'),
        'exclusive': data.get('exclusive', '–Ω–µ—É—Ç–æ—á–Ω–µ–Ω–∞'),
        'financing': data.get('financing', '–Ω–µ—É—Ç–æ—á–Ω–µ–Ω–æ'),
        'unique_features': data.get('unique_features', '–Ω–µ—É—Ç–æ—á–Ω–µ–Ω–∏'),
        'broker_name': data.get('broker_name', '–±—Ä–æ–∫–µ—Ä'), # New field
        'broker_phone': data.get('broker_phone', '–Ω–µ—É—Ç–æ—á–Ω–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω'), # New field
        # New specific fields for different property types
        'yard_area': data.get('yard_area', ''),
        'number_of_floors': data.get('number_of_floors', ''),
        'heating_system': data.get('heating_system', ''),
        'pool': data.get('pool', ''),
        'garden': data.get('garden', ''),
        'zoning': data.get('zoning', ''),
        'utilities': data.get('utilities', ''),
        'access_road': data.get('access_road', ''),
        'commercial_type': data.get('commercial_type', ''),
        'foot_traffic': data.get('foot_traffic', ''),
        'current_business': data.get('current_business', ''),
        'facilities': data.get('facilities', ''),
        'total_built_up_area': data.get('total_built_up_area', ''),
        'number_of_units': data.get('number_of_units', ''),
        'occupancy': data.get('occupancy', ''),
        'income_potential': data.get('income_potential', ''),
    }

    # Extract base64 image data
    image_data_base64 = data.get('images', [])

    generated_short_ad = "–í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ—Ç–æ –Ω–∞ –∫—Ä–∞—Ç–∫–∞—Ç–∞ –æ–±—è–≤–∞."
    generated_long_ad = "–í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ—Ç–æ –Ω–∞ –¥—ä–ª–≥–∞—Ç–∞ –æ–±—è–≤–∞."
    error_message = None

    try:
        if client is None:
            raise ValueError("OpenAI –∫–ª–∏–µ–Ω—Ç—ä—Ç –Ω–µ –µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω. API –∫–ª—é—á—ä—Ç –º–æ–∂–µ –¥–∞ –ª–∏–ø—Å–≤–∞ –∏–ª–∏ –¥–∞ –µ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω.")

        print("DEBUG: OpenAI client is ready for vision model.")

        # Construct basic text prompt based on property type and all available data
        base_text_prompt = f"""
–¢–∏ —Å–∏ –µ–∫—Å–ø–µ—Ä—Ç –ø–æ –∏–º–æ—Ç–Ω–∏ –æ–±—è–≤–∏ –∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥ –∑–∞ –Ω–µ–¥–≤–∏–∂–∏–º–∏ –∏–º–æ—Ç–∏. –¢–≤–æ—è—Ç–∞ –∑–∞–¥–∞—á–∞ –µ –¥–∞ —Å—ä–∑–¥–∞–¥–µ—à –î–í–ï –í–ï–†–°–ò–ò –Ω–∞ –æ–±—è–≤–∞ –∑–∞ –ø—Ä–æ–¥–∞–∂–±–∞ –Ω–∞ –∏–º–æ—Ç, —Å—ä–æ–±—Ä–∞–∑–µ–Ω–∞ —Å Facebook Marketplace:
1.  **–ö–†–ê–¢–ö–ê –í–ï–†–°–ò–Ø:** –ú–Ω–æ–≥–æ —Å–±–∏—Ç–∞, –∞–∫—Ü–µ–Ω—Ç–∏—Ä–∞—â–∞ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–∏—Ç–µ –ø—Ä–µ–¥–∏–º—Å—Ç–≤–∞, –ø–æ–¥—Ö–æ–¥—è—â–∞ –∑–∞ –±—ä—Ä–∑–æ —Å–∫–∞–Ω–∏—Ä–∞–Ω–µ.
2.  **–î–™–õ–ì–ê –í–ï–†–°–ò–Ø:** –ü–æ–¥—Ä–æ–±–Ω–∞ –∏ –æ–ø–∏—Å–∞—Ç–µ–ª–Ω–∞, —Å –ø–æ–≤–µ—á–µ –¥–µ—Ç–∞–π–ª–∏ –∑–∞ –≤—Å–∏—á–∫–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏.

**–°–¢–†–û–ì–û –°–ï –ü–†–ò–î–™–†–ñ–ê–ô –°–ê–ú–û –ö–™–ú –§–ê–ö–¢–ò–ß–ï–°–ö–ò –î–ê–ù–ù–ò, –ü–†–ï–î–û–°–¢–ê–í–ï–ù–ò –í –¢–ï–ö–°–¢–ê –ò–õ–ò –í–ò–ó–£–ê–õ–ù–û –û–¢–ö–†–ò–¢–ò –í –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø–¢–ê. –ù–ï –ò–ó–ú–ò–°–õ–Ø–ô –ù–ò–ö–ê–ö–í–ò –î–û–ü–™–õ–ù–ò–¢–ï–õ–ù–ò –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò –ò–õ–ò –ü–†–ï–î–ò–ú–°–¢–í–ê.**
**–ù–ï –í–ö–õ–Æ–ß–í–ê–ô –ù–û–ú–ï–†–ò–†–ê–ù–ò –°–ü–ò–°–™–¶–ò (1., 2., 3. –∏ —Ç.–Ω.) –ò–õ–ò –í–™–¢–†–ï–®–ù–ò –ú–ê–†–ö–ï–†–ò –ó–ê –°–ï–ö–¶–ò–ò –í –ì–ï–ù–ï–†–ò–†–ê–ù–ò–Ø –¢–ï–ö–°–¢ –ù–ê –û–ë–Ø–í–ò–¢–ï. –ì–µ–Ω–µ—Ä–∏—Ä–∞–π –¥–∏—Ä–µ–∫—Ç–Ω–æ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ—Ç–æ.**

–ê–Ω–∞–ª–∏–∑–∏—Ä–∞–π –≤–Ω–∏–º–∞—Ç–µ–ª–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–µ–Ω–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞ –∫–ª—é—á–æ–≤–∏ –≤–∏–∑—É–∞–ª–Ω–∏ –ø—Ä–µ–¥–∏–º—Å—Ç–≤–∞ (–Ω–∞–ø—Ä. –ª—É–∫—Å–æ–∑–µ–Ω –∏–Ω—Ç–µ—Ä–∏–æ—Ä, –ø–∞–Ω–æ—Ä–∞–º–Ω–∞ –≥–ª–µ–¥–∫–∞, –º–æ–¥–µ—Ä–Ω–∏ —É—Ä–µ–¥–∏, –ø—Ä–æ—Å—Ç–æ—Ä, —É—é—Ç, —Å—ä—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ —Å—Ç–∞–∏—Ç–µ, –æ–±–∑–∞–≤–µ–∂–¥–∞–Ω–µ, —Å—ä—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –¥–≤–æ—Ä/–≥—Ä–∞–¥–∏–Ω–∞, –∫–æ–º—É–Ω–∏–∫–∞—Ü–∏–∏ –∑–∞ –ø–∞—Ä—Ü–µ–ª, –ª–∏—Ü–µ –Ω–∞ —É–ª–∏—Ü–∞ –∑–∞ –º–∞–≥–∞–∑–∏–Ω) –∏ –≥–∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–∞–π –≤ –æ–±—è–≤–∞—Ç–∞.

–î–∞–Ω–Ω–∏ –∑–∞ –∏–º–æ—Ç–∞ (–¢–∏–ø: {form_data['property_type']}):
üìå –õ–æ–∫–∞—Ü–∏—è: {form_data['location']}
üí∞ –¶–µ–Ω–∞: {form_data['price']} ‚Ç¨
üìê –ü–ª–æ—â: {form_data['area']} –∫–≤.–º
{f"üå≥ –ü–ª–æ—â –Ω–∞ –¥–≤–æ—Ä: {form_data['yard_area']}" if form_data['yard_area'] else ""}
{f"üè¢ –ï—Ç–∞–∂: {form_data['floor']}" if form_data['floor'] else ""}
{f"üèóÔ∏è –ì–æ–¥–∏–Ω–∞ –Ω–∞ —Å—Ç—Ä–æ–µ–∂: {form_data['year_built']}" if form_data['year_built'] else ""}
üí≥ –ú–µ—Å–µ—á–Ω–∞ –≤–Ω–æ—Å–∫–∞: {form_data['installment']} ‚Ç¨
üõãÔ∏è –û–±–∑–∞–≤–µ–∂–¥–∞–Ω–µ: {form_data['furnishing']}
üåÑ –ü–∞–Ω–æ—Ä–∞–º–∞: {form_data['panorama']}
üõó –ê—Å–∞–Ω—Å—å–æ—Ä: {form_data['elevator']}
üöó –ì–∞—Ä–∞–∂: {form_data['garage']}
üíº –ï–∫—Å–∫–ª—É–∑–∏–≤–Ω–æ—Å—Ç: {form_data['exclusive']}
üè¶ –§–∏–Ω–∞–Ω—Å–∏—Ä–∞–Ω–µ: {form_data['financing']}
üñºÔ∏è –£–Ω–∏–∫–∞–ª–Ω–∏ –ø—Ä–µ–¥–∏–º—Å—Ç–≤–∞ (–¥–æ–ø—ä–ª–Ω–∏—Ç–µ–ª–µ–Ω —Ç–µ–∫—Å—Ç –æ—Ç –±—Ä–æ–∫–µ—Ä): {form_data['unique_features']}
{f"üè° –ë—Ä–æ–π –µ—Ç–∞–∂–∏: {form_data['number_of_floors']}" if form_data['number_of_floors'] else ""}
{f"üî• –û—Ç–æ–ø–ª–µ–Ω–∏–µ: {form_data['heating_system']}" if form_data['heating_system'] else ""}
{f"üèä –ë–∞—Å–µ–π–Ω: {form_data['pool']}" if form_data['pool'] else ""}
{f"üåø –ì—Ä–∞–¥–∏–Ω–∞: {form_data['garden']}" if form_data['garden'] else ""}
{f"üéØ –ó–æ–Ω–∏—Ä–∞–Ω–µ/–ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {form_data['zoning']}" if form_data['zoning'] else ""}
{f"üíß –ö–æ–º—É–Ω–∏–∫–∞—Ü–∏–∏: {form_data['utilities']}" if form_data['utilities'] else ""}
{f"üõ£Ô∏è –î–æ—Å—Ç—ä–ø –¥–æ –ø—ä—Ç: {form_data['access_road']}" if form_data['access_road'] else ""}
{f"üõçÔ∏è –¢–∏–ø –æ–±–µ–∫—Ç: {form_data['commercial_type']}" if form_data['commercial_type'] else ""}
{f"üö∂ –ü–æ—Ç–æ–∫ –æ—Ç —Ö–æ—Ä–∞: {form_data['foot_traffic']}" if form_data['foot_traffic'] else ""}
{f"üè¢ –ù–∞—Å—Ç–æ—è—â –±–∏–∑–Ω–µ—Å: {form_data['current_business']}" if form_data['current_business'] else ""}
{f"üöΩ –£–¥–æ–±—Å—Ç–≤–∞ –≤ –æ–±–µ–∫—Ç–∞: {form_data['facilities']}" if form_data['facilities'] else ""}
{f"üèóÔ∏è –û–±—â–∞ –†–ó–ü: {form_data['total_built_up_area']}" if form_data['total_built_up_area'] else ""}
{f"üèòÔ∏è –ë—Ä–æ–π –æ–±–µ–∫—Ç–∏/–µ–¥–∏–Ω–∏—Ü–∏: {form_data['number_of_units']}" if form_data['number_of_units'] else ""}
{f"üìà –ó–∞–µ—Ç–æ—Å—Ç: {form_data['occupancy']}" if form_data['occupancy'] else ""}
{f"üí∞ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –∑–∞ –¥–æ—Ö–æ–¥: {form_data['income_potential']}" if form_data['income_potential'] else ""}

---–ö–†–ê–¢–ö–ê –û–ë–Ø–í–ê START---
üí• –ö—É–ø–∏ –∑–∞ {form_data['installment']} ‚Ç¨/–º–µ—Å–µ—Ü ‚Äì [2-3 –Ω–∞–π-—Å–∏–ª–Ω–∏, –∫–ª—é—á–æ–≤–∏ –ø—Ä–µ–¥–∏–º—Å—Ç–≤–∞, –∏–∑–≤–ª–µ—á–µ–Ω–∏ –æ—Ç –¥–∞–Ω–Ω–∏—Ç–µ –∏ —Å–Ω–∏–º–∫–∏—Ç–µ, —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏ –∑–∞ {form_data['property_type']}]
[–ö—Ä–∞—Ç—ä–∫, –µ–º–æ—Ü–∏–æ–Ω–∞–ª–µ–Ω –≤—Å—Ç—ä–ø–∏—Ç–µ–ª–µ–Ω —Ä–µ–¥. –ö—Ä–∞—Ç–∫–æ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∏–º–æ—Ç–∞, —Å –∞–∫—Ü–µ–Ω—Ç –≤—ä—Ä—Ö—É 2-3 –Ω–∞–π-–≤–∞–∂–Ω–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∑–∞ {form_data['property_type']}, –æ—Ç–∫—Ä–∏—Ç–∏ –æ—Ç —Å–Ω–∏–º–∫–∏—Ç–µ –∏ –¥–∞–Ω–Ω–∏—Ç–µ.]
‚ú® –¢–æ–∑–∏ –∏–º–æ—Ç –º–æ–∂–µ –¥–∞ –±—ä–¥–µ –∑–∞–∫—É–ø–µ–Ω –Ω–∞ —Ä–∞–∑—Å—Ä–æ—á–µ–Ω–æ –ø–ª–∞—â–∞–Ω–µ —á—Ä–µ–∑ –ë–∞–Ω–∫–æ–≤ –ò–ø–æ—Ç–µ—á–µ–Ω –ö—Ä–µ–¥–∏—Ç —Å –º–µ—Å–µ—á–Ω–∞ –≤–Ω–æ—Å–∫–∞ –æ—Ç {form_data['installment']} ‚Ç¨.\nüîì–ë–µ–∑ –Ω–∞—á–∞–ª–µ–Ω –∫–∞–ø–∏—Ç–∞–ª, –±–µ–∑ –¥–æ–∫–∞–∑–∞–Ω–∏ –¥–æ—Ö–æ–¥–∏ –∏–ª–∏ —Å –≤–ª–æ—à–µ–Ω–∞ –∫—Ä–µ–¥–∏—Ç–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è ‚Äì –Ω–∏–µ —Å—ä–¥–µ–π—Å—Ç–≤–∞–º–µ –∑–∞ —É—Å–ø–µ—à–Ω–æ –±–∞–Ω–∫–æ–≤–æ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–∞–Ω–µ.\nüìå –§–∏–Ω–∞–Ω—Å–∏—Ä–∞–Ω–µ—Ç–æ –Ω–µ –µ –ø—Ä–µ—á–∫–∞ ‚Äì —Ç–æ –µ —á–∞—Å—Ç –æ—Ç —Ä–µ—à–µ–Ω–∏–µ—Ç–æ.
üìû –ó–∞ –æ–≥–ª–µ–¥: {form_data['broker_name']} ‚Äì {form_data['broker_phone']}
---–ö–†–ê–¢–ö–ê –û–ë–Ø–í–ê END---

---–î–™–õ–ì–ê –û–ë–Ø–í–ê START---
üí• –ö—É–ø–∏ –∑–∞ {form_data['installment']} ‚Ç¨/–º–µ—Å–µ—Ü ‚Äì [2-3 –Ω–∞–π-—Å–∏–ª–Ω–∏, –∫–ª—é—á–æ–≤–∏ –ø—Ä–µ–¥–∏–º—Å—Ç–≤–∞, –∏–∑–≤–ª–µ—á–µ–Ω–∏ –æ—Ç –¥–∞–Ω–Ω–∏—Ç–µ –∏ —Å–Ω–∏–º–∫–∏—Ç–µ, —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏ –∑–∞ {form_data['property_type']}]
[–ï–º–æ—Ü–∏–æ–Ω–∞–ª–µ–Ω –≤—Å—Ç—ä–ø–∏—Ç–µ–ª–µ–Ω –∞–±–∑–∞—Ü, –ø—Ä–µ–¥—Å—Ç–∞–≤—è—â –Ω–∞–π-–≥–æ–ª–µ–º–∏—Ç–µ –ø–æ–ª–∑–∏.]
–ö–ª—é—á–æ–≤–∏ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (–†–µ–∑—é–º–µ):
üìê –ü–ª–æ—â: {form_data['area']} –∫–≤.–º | üí∞ –¶–µ–Ω–∞: {form_data['price']} ‚Ç¨ | üìç –õ–æ–∫–∞—Ü–∏—è: {form_data['location']} | üõãÔ∏è –û–±–∑–∞–≤–µ–∂–¥–∞–Ω–µ: {form_data['furnishing']}
[–ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {form_data['property_type']}, –Ω–µ–≥–æ–≤–æ—Ç–æ —Ä–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, —Å—ä—Å—Ç–æ—è–Ω–∏–µ, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏ –ø—Ä–µ–¥–∏–º—Å—Ç–≤–∞, –∏–∑–≤–ª–µ—á–µ–Ω–∏ –æ—Ç —Å–Ω–∏–º–∫–∏—Ç–µ –∏ –¥–∞–Ω–Ω–∏—Ç–µ.]
[–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –ª–æ–∫–∞—Ü–∏—è—Ç–∞ –∏ –ø—Ä–µ–¥–∏–º—Å—Ç–≤–∞—Ç–∞ –Ω–∞ –∫–≤–∞—Ä—Ç–∞–ª–∞/—Ä–∞–π–æ–Ω–∞, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∏ –∑–∞ {form_data['property_type']}.]
–ó–∞—â–æ —Å 360ESTATE?:
[–ê–∫—Ü–µ–Ω—Ç –≤—ä—Ä—Ö—É –ø—Ä–æ—Ñ–µ—Å–∏–æ–Ω–∞–ª–Ω–∞ –ø–æ–¥–∫—Ä–µ–ø–∞, —Å–∏–≥—É—Ä–Ω–æ—Å—Ç –∏ —É–ª–µ—Å–Ω–µ–Ω–∏–µ.]
–ò–¥–µ–∞–ª–µ–Ω –∏–∑–±–æ—Ä –∑–∞:
[2-3 –ø–æ–¥—Ö–æ–¥—è—â–∏ –≥—Ä—É–ø–∏ (–Ω–∞–ø—Ä. –ú–ª–∞–¥–æ —Å–µ–º–µ–π—Å—Ç–≤–æ, –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è —Å –≤–∏—Å–æ–∫–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç).]
‚ú® –¢–æ–∑–∏ –∏–º–æ—Ç –º–æ–∂–µ –¥–∞ –±—ä–¥–µ –∑–∞–∫—É–ø–µ–Ω –Ω–∞ —Ä–∞–∑—Å—Ä–æ—á–µ–Ω–æ –ø–ª–∞—â–∞–Ω–µ —á—Ä–µ–∑ –ë–∞–Ω–∫–æ–≤ –ò–ø–æ—Ç–µ—á–µ–Ω –ö—Ä–µ–¥–∏—Ç —Å –º–µ—Å–µ—á–Ω–∞ –≤–Ω–æ—Å–∫–∞ –æ—Ç {form_data['installment']} ‚Ç¨.\nüîì–ë–µ–∑ –Ω–∞—á–∞–ª–µ–Ω –∫–∞–ø–∏—Ç–∞–ª, –±–µ–∑ –¥–æ–∫–∞–∑–∞–Ω–∏ –¥–æ—Ö–æ–¥–∏ –∏–ª–∏ —Å –≤–ª–æ—à–µ–Ω–∞ –∫—Ä–µ–¥–∏—Ç–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è ‚Äì –Ω–∏–µ —Å—ä–¥–µ–π—Å—Ç–≤–∞–º–µ –∑–∞ —É—Å–ø–µ—à–Ω–æ –±–∞–Ω–∫–æ–≤–æ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–∞–Ω–µ.\nüìå –§–∏–Ω–∞–Ω—Å–∏—Ä–∞–Ω–µ—Ç–æ –Ω–µ –µ –ø—Ä–µ—á–∫–∞ ‚Äì —Ç–æ –µ —á–∞—Å—Ç –æ—Ç —Ä–µ—à–µ–Ω–∏–µ—Ç–æ.
üìû –ó–∞ –æ–≥–ª–µ–¥: {form_data['broker_name']} ‚Äì {form_data['broker_phone']}
[–ì–µ–Ω–µ—Ä–∏—Ä–∞–π –ø–æ–¥—Ö–æ–¥—è—â–∏ —Ö–∞—à—Ç–∞–≥–æ–≤–µ –∑–∞ {form_data['property_type']} –∏ –ª–æ–∫–∞—Ü–∏—è—Ç–∞.]
---–î–™–õ–ì–ê –û–ë–Ø–í–ê END---
"""
        messages_content = [{"type": "text", "text": base_text_prompt}]

        # Add image URLs to the messages_content if available
        for img_b64 in image_data_base64:
            # ReportLab only supports JPEG, PNG, GIF, BMP. Check image type if possible.
            # For simplicity, we just pass the base64 string directly
            messages_content.append({"type": "image_url", "image_url": {"url": img_b64}})

        response = client.chat.completions.create(
            model="gpt-4o", # Using GPT-4o for multimodal capabilities
            messages=[{"role": "user", "content": messages_content}],
            temperature=0.8,
            max_tokens=2500 # Increased max_tokens to ensure enough space for detailed output
        )
        full_generated_text = response.choices[0].message.content.strip()
        print(f"DEBUG: OpenAI Response received. Full text length: {len(full_generated_text)}")

        # Parse the full generated text into short and long versions using updated markers
        short_ad_start_marker = "---–ö–†–ê–¢–ö–ê –û–ë–Ø–í–ê START---"
        short_ad_end_marker = "---–ö–†–ê–¢–ö–ê –û–ë–Ø–í–ê END---"
        long_ad_start_marker = "---–î–™–õ–ì–ê –û–ë–Ø–í–ê START---"
        long_ad_end_marker = "---–î–™–õ–ì–ê –û–ë–Ø–í–ê END---"

        short_ad = "–ù–µ—É—Å–ø–µ—à–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –∫—Ä–∞—Ç–∫–∞ –æ–±—è–≤–∞. –ú–æ–ª—è, –ø—Ä–æ–≤–µ—Ä–µ—Ç–µ –ª–æ–≥–æ–≤–µ—Ç–µ."
        long_ad = "–ù–µ—É—Å–ø–µ—à–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –¥—ä–ª–≥–∞ –æ–±—è–≤–∞. –ú–æ–ª—è, –ø—Ä–æ–≤–µ—Ä–µ—Ç–µ –ª–æ–≥–æ–≤–µ—Ç–µ."

        # Extract Short Ad
        start_index = full_generated_text.find(short_ad_start_marker)
        end_index = full_generated_text.find(short_ad_end_marker)
        if start_index != -1 and end_index != -1:
            short_ad = full_generated_text[start_index + len(short_ad_start_marker):end_index].strip()
        
        # Extract Long Ad
        start_index = full_generated_text.find(long_ad_start_marker)
        end_index = full_generated_text.find(long_ad_end_marker)
        if start_index != -1 and end_index != -1:
            long_ad = full_generated_text[start_index + len(long_ad_start_marker):end_index].strip()


    except openai.APIError as e:
        error_message = f"AI –≥—Ä–µ—à–∫–∞: –ü—Ä–æ–±–ª–µ–º —Å OpenAI API: {str(e)}. –ú–æ–ª—è, –ø—Ä–æ–≤–µ—Ä–µ—Ç–µ API –∫–ª—é—á–∞ –∏ –ª–∏–º–∏—Ç–∏—Ç–µ —Å–∏."
        print(f"DEBUG ERROR: OpenAI API Error: {error_message}")
        return jsonify({"error": error_message}), 500
    except ValueError as e:
        error_message = f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–∞ –≥—Ä–µ—à–∫–∞: {str(e)}"
        print(f"DEBUG ERROR: ValueError: {error_message}")
        return jsonify({"error": error_message}), 500
    except Exception as e:
        error_message = f"–ù–µ–æ—á–∞–∫–≤–∞–Ω–∞ –≥—Ä–µ—à–∫–∞: {str(e)}"
        print(f"DEBUG ERROR: Generic Exception in generate_ad: {error_message}")
        return jsonify({"error": error_message}), 500

    print(f"DEBUG: Returning JSON response with two ad versions.")
    return jsonify({
        'short_ad': short_ad,
        'long_ad': long_ad,
        'images_for_pdf': image_data_base64 # Pass base64 images to frontend for PDF generation
    })

@app.route('/generate_pdf', methods=['POST'])
def generate_pdf():
    print("DEBUG: generate_pdf route hit!")
    data = request.json
    ad_text = data.get('ad_text', '–ù—è–º–∞ —Ç–µ–∫—Å—Ç –∑–∞ –æ–±—è–≤–∞—Ç–∞.')
    images_b64 = data.get('images_for_pdf', [])
    
    buffer = BytesIO()
    # Use portrait(A4) for standard portrait orientation
    doc = SimpleDocTemplate(buffer, pagesize=portrait(A4),
                            leftMargin=0.75*inch, rightMargin=0.75*inch,
                            topMargin=0.75*inch, bottomMargin=0.75*inch)
    
    styles = getSampleStyleSheet()

    # Register a font that supports Cyrillic characters
    # This requires the font file to be available on the Render server.
    # Common cross-platform fonts: DejaVu Sans, Liberation Sans, or Noto Sans.
    # For simplicity and common availability in Linux environments (like Render),
    # we'll try to register DejaVuSans.
    # On Render, you might need to ensure these fonts are present in the build environment.
    # A robust solution often involves bundling the font files with your app.
    from reportlab.pdfbase import pdfmetrics
    from reportlab.pdfbase.ttfonts import TTFont

    # Attempt to register a common font with Cyrillic support
    # You might need to upload this .ttf file to your project and adjust the path
    # For Render, a common strategy is to place fonts in a 'fonts' directory within your app.
    try:
        # Example path if you bundle the font in a 'fonts' folder in your root project
        font_path = os.path.join(os.path.dirname(__file__), 'fonts', 'DejaVuSans.ttf')
        if not os.path.exists(font_path):
            # Fallback to system path or commonly available paths on Linux (like Render's base image)
            # This is less reliable without bundling.
            # On Render, fonts like DejaVuSans might be in /usr/share/fonts/truetype/dejavu/
            # For a guaranteed solution, bundle DejaVuSans.ttf in your 'fonts' folder.
            print("DEBUG: DejaVuSans.ttf not found in app's fonts folder. Trying system path.")
            if platform.system() == "Linux":
                font_path = "/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf" # Common path on Linux
            else:
                font_path = "DejaVuSans.ttf" # Fallback, might not work
                
        if os.path.exists(font_path):
            pdfmetrics.registerFont(TTFont('DejaVuSans', font_path))
            pdfmetrics.registerFont(TTFont('DejaVuSans-Bold', font_path)) # Register bold if available
            styles.add(ParagraphStyle(name='CyrillicNormal', parent=styles['Normal'], fontName='DejaVuSans', fontSize=10, leading=14, spaceAfter=6, alignment=TA_LEFT))
            styles.add(ParagraphStyle(name='CyrillicBold', parent=styles['h2'], fontName='DejaVuSans-Bold', fontSize=12, leading=14, alignment=TA_LEFT))
            styles.add(ParagraphStyle(name='CyrillicTitle', parent=styles['h1'], fontName='DejaVuSans-Bold', fontSize=16, leading=18, alignment=TA_CENTER, spaceAfter=12))
            styles.add(ParagraphStyle(name='CyrillicImageCaption', parent=styles['Normal'], fontName='DejaVuSans', fontSize=8, alignment=TA_CENTER, spaceAfter=6))
            styles.add(ParagraphStyle(name='CyrillicBullet', parent=styles['Normal'], fontName='DejaVuSans', fontSize=10, leading=14, spaceAfter=2, leftIndent=36))

            # Update default styles to use Cyrillic-compatible fonts
            styles['Normal'].fontName = 'DejaVuSans'
            styles['h1'].fontName = 'DejaVuSans-Bold'
            styles['h2'].fontName = 'DejaVuSans-Bold'
            styles['Bullet'].fontName = 'DejaVuSans'
            
            # Update custom styles to use Cyrillic-compatible fonts
            styles.add(ParagraphStyle(name='AdTitle', parent=styles['CyrillicTitle']))
            styles.add(ParagraphStyle(name='AdBody', parent=styles['CyrillicNormal']))
            styles.add(ParagraphStyle(name='ImageCaption', parent=styles['CyrillicImageCaption']))
            styles.add(ParagraphStyle(name='BulletPoint', parent=styles['CyrillicBullet']))

            print("DEBUG: DejaVuSans font registered successfully.")
        else:
            print(f"DEBUG ERROR: DejaVuSans.ttf not found at {font_path}. Cyrillic might not display correctly.")
            # Fallback to default fonts if DejaVuSans is not found
            styles.add(ParagraphStyle(name='AdTitle', parent=styles['h1'], fontSize=16, leading=18, alignment=TA_CENTER, spaceAfter=12))
            styles.add(ParagraphStyle(name='AdBody', parent=styles['Normal'], fontSize=10, leading=14, spaceAfter=6, alignment=TA_LEFT))
            styles.add(ParagraphStyle(name='ImageCaption', parent=styles['Normal'], fontSize=8, alignment=TA_CENTER, spaceAfter=6))
            styles.add(ParagraphStyle(name='BulletPoint', parent=styles['Normal'], fontSize=10, leading=14, spaceAfter=2, leftIndent=36))

    except Exception as e:
        print(f"DEBUG ERROR: Failed to register font: {e}. Cyrillic might not display correctly.")
        # Fallback to default fonts if font registration fails
        styles.add(ParagraphStyle(name='AdTitle', parent=styles['h1'], fontSize=16, leading=18, alignment=TA_CENTER, spaceAfter=12))
        styles.add(ParagraphStyle(name='AdBody', parent=styles['Normal'], fontSize=10, leading=14, spaceAfter=6, alignment=TA_LEFT))
        styles.add(ParagraphStyle(name='ImageCaption', parent=styles['Normal'], fontSize=8, alignment=TA_CENTER, spaceAfter=6))
        styles.add(ParagraphStyle(name='BulletPoint', parent=styles['Normal'], fontSize=10, leading=14, spaceAfter=2, leftIndent=36))


    story = []

    story.append(Paragraph("<b><font size=16>–ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–∞ –û–±—è–≤–∞ –æ—Ç 360ESTATE</font></b>", styles['AdTitle']))
    story.append(Spacer(1, 0.2 * inch))

    # Add ad text
    lines = ad_text.split('\n')
    for line in lines:
        line = line.strip()
        if not line: # Empty line
            story.append(Spacer(1, 0.1 * inch))
            continue

        # Convert markdown bold/italic/underline to ReportLab's RML
        formatted_line = line
        
        # Regex to replace markdown bold (**text** or __text__)
        formatted_line = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', formatted_line)
        formatted_line = re.sub(r'__(.*?)__', r'<b>\1</b>', formatted_line)
        
        # Regex to replace markdown italic (*text* or _text_) - ReportLab needs <i>
        formatted_line = re.sub(r'\*(.*?)\*', r'<i>\1</i>', formatted_line)
        formatted_line = re.sub(r'_(.*?)_', r'<i>\1</i>', formatted_line)

        # Replace common emojis with their text equivalents for PDF compatibility
        emoji_map = {
            'üí•': '–í–∑—Ä–∏–≤: ', '‚ú®': '–ó–≤–µ–∑–¥–∞: ', 'üîì': '–û—Ç–∫–ª—é—á–µ–Ω–æ: ', 'üìå': '–ü–∏–Ω: ', 'üìû': '–¢–µ–ª–µ—Ñ–æ–Ω: ',
            '‚úÖ': '–û–ö: ', 'üè°': '–ö—ä—â–∞: ', 'üìê': '–ü–ª–æ—â: ', 'üí∞': '–ü–∞—Ä–∏: ', 'üìç': '–õ–æ–∫–∞—Ü–∏—è: ',
            'üõãÔ∏è': '–ú–µ–±–µ–ª–∏: ', 'üå≥': '–î—ä—Ä–≤–æ: ', 'üèä': '–ë–∞—Å–µ–π–Ω: ', 'üöó': '–ö–æ–ª–∞: ', 'üî•': '–û–≥—ä–Ω: ',
            'üèûÔ∏è': '–ü–µ–π–∑–∞–∂: ', 'üíß': '–í–æ–¥–∞: ', '‚ö°': '–ï–ª.: ', 'üõ£Ô∏è': '–ü—ä—Ç: ', 'üõçÔ∏è': '–ú–∞–≥–∞–∑–∏–Ω: ',
            'üìà': '–ì—Ä–∞—Ñ–∏–∫–∞: ', 'üö∂‚Äç‚ôÇÔ∏è': '–ß–æ–≤–µ–∫: ', 'üèóÔ∏è': '–°—Ç—Ä–æ–µ–∂: ', 'üèòÔ∏è': '–°–≥—Ä–∞–¥–∏: ', 'üéØ': '–¶–µ–ª: ',
            'üí°': '–ò–¥–µ—è: ', 'üõó': '–ê—Å–∞–Ω—Å—å–æ—Ä: ', 'üõå': '–°–ø–∞–ª–Ω—è: ', 'üõÄ': '–ë–∞–Ω—è: ', 'üçΩÔ∏è': '–ö—É—Ö–Ω—è: ',
            'üåø': '–†–∞—Å—Ç–µ–Ω–∏–µ: ', 'üè¢': '–°–≥—Ä–∞–¥–∞: ', 'üîë': '–ö–ª—é—á: ', '‚òÄÔ∏è': '–°–ª—ä–Ω—Ü–µ: ', 'üåä': '–í—ä–ª–Ω–∏: '
        }
        for emoji, text_eq in emoji_map.items():
            formatted_line = formatted_line.replace(emoji, text_eq)
        
        # Remove any other complex unicode/emojis that might cause issues and are not in map
        # This is a broad approach to prevent errors.
        formatted_line = formatted_line.encode('ascii', 'ignore').decode('ascii')


        # Handle list items for bullet points
        if formatted_line.startswith('‚Ä¢ ') or formatted_line.startswith('- ') or formatted_line.startswith('* '):
            story.append(Paragraph(formatted_line, styles['BulletPoint']))
        elif formatted_line.startswith('–û–ö: '): # Handle emojis replaced by text_eq like '–û–ö: '
            story.append(Paragraph(f'‚Ä¢ {formatted_line[4:]}', styles['BulletPoint']))
        else:
            story.append(Paragraph(formatted_line, styles['AdBody']))

    story.append(Spacer(1, 0.2 * inch)) # Reduced space after text

    # Add images
    if images_b64:
        # Max height for all images combined to try to fit on one page
        # A4 height (842 points) - top/bottom margins (2*0.75*72 points = 108) - text height (estimated 200-300) = remaining height
        # Remaining height approx 400-500 points
        max_total_images_height = (portrait(A4)[1] - (2 * 0.75 * inch) - (len(story) * 14)) * 0.6 # Adjust multiplier for content space
        current_images_height = 0
        
        story.append(Paragraph("<b>–ü—Ä–∏–∫–∞—á–µ–Ω–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:</b>", styles['CyrillicBold'] if 'CyrillicBold' in styles else styles['h2']))
        story.append(Spacer(1, 0.1 * inch)) # Reduced space

        for i, img_b64 in enumerate(images_b64):
            try:
                # Remove data:image/png;base64, or similar prefix
                header, base64_string = img_b64.split(',', 1)
                img_data = base64.b64decode(base64_string)
                img = Image(BytesIO(img_data))
                
                # Scale image to fit page width, maintaining aspect ratio
                max_img_width = A4[0] - 1.5 * inch # A4 width minus side margins (0.75 inch each side)
                
                img_width = img.drawWidth
                img_height = img.drawHeight
                
                if img_width > max_img_width:
                    scale_factor = max_img_width / img_width
                    img_width = max_img_width
                    img_height = img_height * scale_factor
                
                # Further scale height if it's still too large for total page space (and for single image display)
                # Max height for a single image, try to balance for multiple images
                max_single_img_height = 2.5 * inch # Reduced max single image height
                if img_height > max_single_img_height:
                    scale_factor = max_single_img_height / img_height
                    img_width = img_width * scale_factor
                    img_height = max_single_img_height
                
                # Check if adding this image exceeds total allowed height (and if it's the last one)
                if (current_images_height + img_height + (0.1 * inch * 2) > max_total_images_height) and (i < len(images_b64) - 1):
                    # If this image would overflow AND it's not the last image,
                    # consider adding it to a new page or reducing more.
                    # For "fit on one page", we might need to skip some images or dramatically scale down.
                    # For now, if it overflows, it will just go to next page, but overall smaller.
                    pass 

                img.drawWidth = img_width
                img.drawHeight = img_height
                
                story.append(img)
                story.append(Paragraph(f"<i>–°–Ω–∏–º–∫–∞ {i+1}</i>", styles['ImageCaption']))
                story.append(Spacer(1, 0.1 * inch))
                current_images_height += img_height + (0.1 * inch * 2) # Update current height

            except Exception as e:
                print(f"DEBUG ERROR: Failed to embed image {i+1} in PDF: {e}")
                story.append(Paragraph(f"<i>–ù–µ—É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Å–Ω–∏–º–∫–∞ {i+1}</i>", styles['ImageCaption']))
                story.append(Spacer(1, 0.1 * inch))

    try:
        # Build the PDF
        doc.build(story)
        buffer.seek(0)
        return send_file(buffer, as_attachment=True, download_name='Obyava_za_Imot.pdf', mimetype='application/pdf')
    except Exception as e:
        print(f"DEBUG ERROR: Failed to build PDF: {e}")
        return jsonify({"error": f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ PDF: {str(e)}"}), 500

def allowed_file(filename):
    ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif'}
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

# Serve static files (images) - This route is kept for consistency but not actively used for new uploads in this version
@app.route('/static/uploads/<filename>')
def uploaded_file(filename):
    print(f"DEBUG: Serving static file: {filename} from {app.config['UPLOAD_FOLDER']}")
    if not os.path.exists(app.config['UPLOAD_FOLDER']):
        print(f"DEBUG ERROR: Upload folder not found at {app.config['UPLOAD_FOLDER']}")
        return "Upload folder not found", 404
    return send_from_directory(app.config['UPLOAD_FOLDER'], filename)

if __name__ == '__main__':
    app.run(debug=True)
