# Import necessary libraries
import os
import json
import base64
from io import BytesIO # To handle image data in memory

from flask import Flask, request, jsonify, render_template, send_from_directory
import openai
from werkzeug.utils import secure_filename

# Initialize the Flask application
app = Flask(__name__, template_folder='templates', static_folder='static')

# Define the folder for uploading images (for serving existing ones, though new uploads go to AI directly)
UPLOAD_FOLDER = 'static/uploads'
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

# Configure OpenAI API client
try:
    client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
    print("DEBUG: OpenAI client initialized successfully.")
except Exception as e:
    print(f"DEBUG ERROR: Failed to initialize OpenAI client: {e}")
    client = None

# Define the application password
APP_PASSWORD = "360estate"

# --- Routes for the application ---

@app.route('/')
def index():
    return render_template('login.html')

@app.route('/login', methods=['POST'])
def login():
    password = request.form.get("password")
    if password == APP_PASSWORD:
        return render_template('form.html')
    else:
        return render_template('login.html', error=True)

@app.route('/generate', methods=['POST'])
def generate_ad():
    print("DEBUG: generate_ad route hit!")

    # Parse JSON data from the request
    # Data now includes text fields AND base64 image strings
    data = request.json
    
    # Extract text fields
    form_data = {
        'location': data.get('location', '–Ω–µ—É—Ç–æ—á–Ω–µ–Ω–∞'),
        'price': data.get('price', '–Ω–µ—É—Ç–æ—á–Ω–µ–Ω–∞'),
        'area': data.get('area', '–Ω–µ—É—Ç–æ—á–Ω–µ–Ω–∞'),
        'floor': data.get('floor', '–Ω–µ—É—Ç–æ—á–Ω–µ–Ω'),
        'year_built': data.get('year_built', '–Ω–µ—É—Ç–æ—á–Ω–µ–Ω–∞'),
        'installment': data.get('installment', '–Ω–µ—É—Ç–æ—á–Ω–µ–Ω–∞'),
        'furnishing': data.get('furnishing', '–Ω–µ—É—Ç–æ—á–Ω–µ–Ω–æ'),
        'panorama': data.get('panorama', '–Ω–µ—É—Ç–æ—á–Ω–µ–Ω–∞'),
        'elevator': data.get('elevator', '–Ω–µ—É—Ç–æ—á–Ω–µ–Ω'),
        'garage': data.get('garage', '–Ω–µ—É—Ç–æ—á–Ω–µ–Ω'),
        'exclusive': data.get('exclusive', '–Ω–µ—É—Ç–æ—á–Ω–µ–Ω–∞'),
        'financing': data.get('financing', '–Ω–µ—É—Ç–æ—á–Ω–µ–Ω–æ'),
        'unique_features': data.get('unique_features', '–Ω–µ—É—Ç–æ—á–Ω–µ–Ω–∏'),
        'broker_name': data.get('broker_name', '–±—Ä–æ–∫–µ—Ä'), # New field
        'broker_phone': data.get('broker_phone', '–Ω–µ—É—Ç–æ—á–Ω–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω') # New field
    }

    # Extract base64 image data
    image_data_base64 = data.get('images', [])
    # For this version, images are sent directly to AI, not saved on server in /uploads
    # We will just pass the base64 URLs to the AI.
    # Frontend handles previewing uploaded images.

    generated_ad = "–í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ—Ç–æ –Ω–∞ –æ–±—è–≤–∞—Ç–∞."
    error_message = None

    try:
        if client is None:
            raise ValueError("OpenAI –∫–ª–∏–µ–Ω—Ç—ä—Ç –Ω–µ –µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω. API –∫–ª—é—á—ä—Ç –º–æ–∂–µ –¥–∞ –ª–∏–ø—Å–≤–∞ –∏–ª–∏ –¥–∞ –µ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω.")

        print("DEBUG: OpenAI client is ready for vision model.")

        # Construct multimodal messages for GPT-4o
        messages_content = [
            {"type": "text", "text": f"""
–¢–∏ —Å–∏ –µ–∫—Å–ø–µ—Ä—Ç –ø–æ –∏–º–æ—Ç–Ω–∏ –æ–±—è–≤–∏ –∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥ –∑–∞ –Ω–µ–¥–≤–∏–∂–∏–º–∏ –∏ –∏–º–æ—Ç–∏. –¢–≤–æ—è—Ç–∞ –∑–∞–¥–∞—á–∞ –µ –¥–∞ —Å—ä–∑–¥–∞–¥–µ—à —É–Ω–∏–∫–∞–ª–Ω–∞, —É–±–µ–¥–∏—Ç–µ–ª–Ω–∞ –∏ –µ–º–æ—Ü–∏–æ–Ω–∞–ª–Ω–æ –≤—ä–∑–¥–µ–π—Å—Ç–≤–∞—â–∞ –æ–±—è–≤–∞ –∑–∞ –ø—Ä–æ–¥–∞–∂–±–∞ –Ω–∞ –∏–º–æ—Ç, —Å—ä–æ–±—Ä–∞–∑–µ–Ω–∞ —Å Facebook Marketplace.

**–°–¢–†–ò–ö–¢–ù–û –°–ï –ü–†–ò–î–™–†–ñ–ê–ô –°–ê–ú–û –ö–™–ú –§–ê–ö–¢–ò–ß–ï–°–ö–ò –î–ê–ù–ù–ò, –ü–†–ï–î–û–°–¢–ê–í–ï–ù–ò –í –¢–ï–ö–°–¢–ê –ò–õ–ò –í–ò–ó–£–ê–õ–ù–û –û–¢–ö–†–ò–¢–ò –í –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø–¢–ê. –ù–ï –ò–ó–ú–ò–°–õ–Ø–ô –ù–ò–ö–ê–ö–í–ò –î–û–ü–™–õ–ù–ò–¢–ï–õ–ù–ò –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò –ò–õ–ò –ü–†–ï–î–ò–ú–°–¢–í–ê.**

–ê–Ω–∞–ª–∏–∑–∏—Ä–∞–π –≤–Ω–∏–º–∞—Ç–µ–ª–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–µ–Ω–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞ –∫–ª—é—á–æ–≤–∏ –≤–∏–∑—É–∞–ª–Ω–∏ –ø—Ä–µ–¥–∏–º—Å—Ç–≤–∞ (–Ω–∞–ø—Ä. –ª—É–∫—Å–æ–∑–µ–Ω –∏–Ω—Ç–µ—Ä–∏–æ—Ä, –ø–∞–Ω–æ—Ä–∞–º–Ω–∞ –≥–ª–µ–¥–∫–∞, –º–æ–¥–µ—Ä–Ω–∏ —É—Ä–µ–¥–∏, –ø—Ä–æ—Å—Ç–æ—Ä, —É—é—Ç, —Å—ä—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ —Å—Ç–∞–∏—Ç–µ, –æ–±–∑–∞–≤–µ–∂–¥–∞–Ω–µ) –∏ –≥–∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–∞–π –≤ –æ–±—è–≤–∞—Ç–∞.

–î–∞–Ω–Ω–∏ –∑–∞ –∏–º–æ—Ç–∞:
üìå –õ–æ–∫–∞—Ü–∏—è: {form_data['location']}
üí∞ –¶–µ–Ω–∞: {form_data['price']} ‚Ç¨
üìê –ü–ª–æ—â: {form_data['area']} –∫–≤.–º
üè¢ –ï—Ç–∞–∂: {form_data['floor']}
üèóÔ∏è –ì–æ–¥–∏–Ω–∞ –Ω–∞ —Å—Ç—Ä–æ–µ–∂: {form_data['year_built']}
üí≥ –ú–µ—Å–µ—á–Ω–∞ –≤–Ω–æ—Å–∫–∞: {form_data['installment']} ‚Ç¨
üõãÔ∏è –û–±–∑–∞–≤–µ–∂–¥–∞–Ω–µ: {form_data['furnishing']}
üåÑ –ü–∞–Ω–æ—Ä–∞–º–∞: {form_data['panorama']}
üõó –ê—Å–∞–Ω—Å—å–æ—Ä: {form_data['elevator']}
üöó –ì–∞—Ä–∞–∂: {form_data['garage']}
üíº –ï–∫—Å–∫–ª—É–∑–∏–≤–Ω–æ—Å—Ç: {form_data['exclusive']}
üè¶ –§–∏–Ω–∞–Ω—Å–∏—Ä–∞–Ω–µ: {form_data['financing']}
üñºÔ∏è –£–Ω–∏–∫–∞–ª–Ω–∏ –ø—Ä–µ–¥–∏–º—Å—Ç–≤–∞ (–¥–æ–ø—ä–ª–Ω–∏—Ç–µ–ª–µ–Ω —Ç–µ–∫—Å—Ç –æ—Ç –±—Ä–æ–∫–µ—Ä): {form_data['unique_features']}

–û–±—è–≤–∞—Ç–∞ —Ç—Ä—è–±–≤–∞ –¥–∞ –≤–∫–ª—é—á–≤–∞:
1.  **–ó–∞–≥–ª–∞–≤–∏–µ:** –ó–∞–ø–æ—á–Ω–∏ —Ç–æ—á–Ω–æ —Å "üí• –ö—É–ø–∏ –∑–∞ {form_data['installment']} ‚Ç¨/–º–µ—Å–µ—Ü ‚Äì " –∏ —Å–ª–µ–¥ —Ç–æ–≤–∞ –¥–æ–±–∞–≤–∏ –Ω–∞–π-—Å–∏–ª–Ω–∏—Ç–µ 2-3 –ø—Ä–µ–¥–∏–º—Å—Ç–≤–∞, –∫–æ–∏—Ç–æ —Å–∏ –æ—Ç–∫—Ä–∏–ª –∫–∞–∫—Ç–æ –æ—Ç —Ç–µ–∫—Å—Ç–æ–≤–∏—Ç–µ –¥–∞–Ω–Ω–∏, —Ç–∞–∫–∞ –∏ –æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–µ–Ω–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä. "–æ–±–∑–∞–≤–µ–¥–µ–Ω", "—Å –ø–∞–Ω–æ—Ä–∞–º–∞", "–≥–æ—Ç–æ–≤ –∑–∞ –Ω–∞–Ω–∞—Å—è–Ω–µ", "–º–æ–¥–µ—Ä–Ω–∞ –∫—É—Ö–Ω—è").
2.  **–û—Å–Ω–æ–≤–µ–Ω —Ç–µ–∫—Å—Ç:**
    * –í—Å—Ç—ä–ø–∏—Ç–µ–ª–µ–Ω –∞–±–∑–∞—Ü, –∫–æ–π—Ç–æ –≥—Ä–∞–±–≤–∞ –≤–Ω–∏–º–∞–Ω–∏–µ—Ç–æ –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤—è –∫–ª—é—á–æ–≤–∏ –ø–æ–ª–∑–∏.
    * **–Ø—Å–Ω–æ –∏ –µ–º–æ—Ü–∏–æ–Ω–∞–ª–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—ä–∑–º–æ–∂–Ω–æ—Å—Ç–∏—Ç–µ –∑–∞ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–∞–Ω–µ (–°–¢–†–û–ì–û –¢–û–ó–ò –¢–ï–ö–°–¢):**
        "‚ú® –¢–æ–∑–∏ –∏–º–æ—Ç –º–æ–∂–µ –¥–∞ –±—ä–¥–µ –∑–∞–∫—É–ø–µ–Ω –Ω–∞ —Ä–∞–∑—Å—Ä–æ—á–µ–Ω–æ –ø–ª–∞—â–∞–Ω–µ —á—Ä–µ–∑ –ë–∞–Ω–∫–æ–≤ –ò–ø–æ—Ç–µ—á–µ–Ω –ö—Ä–µ–¥–∏—Ç —Å –º–µ—Å–µ—á–Ω–∞ –≤–Ω–æ—Å–∫–∞ –æ—Ç {form_data['installment']} ‚Ç¨.\nüîì–ë–µ–∑ –Ω–∞—á–∞–ª–µ–Ω –∫–∞–ø–∏—Ç–∞–ª, –±–µ–∑ –¥–æ–∫–∞–∑–∞–Ω–∏ –¥–æ—Ö–æ–¥–∏ –∏–ª–∏ —Å –≤–ª–æ—à–µ–Ω–∞ –∫—Ä–µ–¥–∏—Ç–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è ‚Äì –Ω–∏–µ —Å—ä–¥–µ–π—Å—Ç–≤–∞–º–µ –∑–∞ —É—Å–ø–µ—à–Ω–æ –±–∞–Ω–∫–æ–≤–æ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–∞–Ω–µ.\nüìå –§–∏–Ω–∞–Ω—Å–∏—Ä–∞–Ω–µ—Ç–æ –Ω–µ –µ –ø—Ä–µ—á–∫–∞ ‚Äì —Ç–æ –µ —á–∞—Å—Ç –æ—Ç —Ä–µ—à–µ–Ω–∏–µ—Ç–æ."
    * –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞ —Ä–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏ –ø—Ä–µ–¥–∏–º—Å—Ç–≤–∞ –Ω–∞ –∏–º–æ—Ç–∞, –±–∞–∑–∏—Ä–∞–Ω–∏ –Ω–∞ –¥–∞–Ω–Ω–∏—Ç–µ –∏ —Å–Ω–∏–º–∫–∏—Ç–µ.
    * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –ª–æ–∫–∞—Ü–∏—è—Ç–∞ –∏ –ø—Ä–µ–¥–∏–º—Å—Ç–≤–∞—Ç–∞ –Ω–∞ –∫–≤–∞—Ä—Ç–∞–ª–∞.
    * –†–∞–∑–¥–µ–ª "–ó–∞—â–æ —Å 360ESTATE?" —Å –∞–∫—Ü–µ–Ω—Ç –≤—ä—Ä—Ö—É –ø—Ä–æ—Ñ–µ—Å–∏–æ–Ω–∞–ª–Ω–∞ –ø–æ–¥–∫—Ä–µ–ø–∞, —Å–∏–≥—É—Ä–Ω–æ—Å—Ç –∏ —É–ª–µ—Å–Ω–µ–Ω–∏–µ.
    * **–ü—Ä–∏–∑–∏–≤ –∑–∞ –¥–µ–π—Å—Ç–≤–∏–µ (–°–¢–†–û–ì–û –¢–û–ó–ò –¢–ï–ö–°–¢):**
        "üìû –ó–∞ –æ–≥–ª–µ–¥: {form_data['broker_name']} ‚Äì {form_data['broker_phone']}"
3.  **–§–æ—Ä–º–∞—Ç:** –ò–∑–ø–æ–ª–∑–≤–∞–π –µ–º–æ—Ç–∏–∫–æ–Ω–∏, –Ω–æ–≤–∏ —Ä–µ–¥–æ–≤–µ –∏ –∫—Ä–∞—Ç–∫–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∏ –∑–∞ –ª–µ—Å–Ω–∞ —á–µ—Ç–∏–º–æ—Å—Ç.
            """}
        ]

        # Add image URLs to the messages_content if available
        for img_b64 in image_data_base64:
            messages_content.append({"type": "image_url", "image_url": {"url": img_b64}})

        response = client.chat.completions.create(
            model="gpt-4o", # Using GPT-4o for multimodal capabilities
            messages=[{"role": "user", "content": messages_content}],
            temperature=0.8,
            max_tokens=1200
        )
        generated_ad = response.choices[0].message.content.strip()
        print(f"DEBUG: OpenAI Response received. Generated ad length: {len(generated_ad)}")

    except openai.APIError as e:
        error_message = f"AI –≥—Ä–µ—à–∫–∞: –ü—Ä–æ–±–ª–µ–º —Å OpenAI API: {str(e)}. –ú–æ–ª—è, –ø—Ä–æ–≤–µ—Ä–µ—Ç–µ API –∫–ª—é—á–∞ –∏ –ª–∏–º–∏—Ç–∏—Ç–µ —Å–∏."
        print(f"DEBUG ERROR: OpenAI API Error: {error_message}")
        return jsonify({"error": error_message}), 500
    except ValueError as e:
        error_message = f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–∞ –≥—Ä–µ—à–∫–∞: {str(e)}"
        print(f"DEBUG ERROR: ValueError: {error_message}")
        return jsonify({"error": error_message}), 500
    except Exception as e:
        error_message = f"–ù–µ–æ—á–∞–∫–≤–∞–Ω–∞ –≥—Ä–µ—à–∫–∞: {str(e)}"
        print(f"DEBUG ERROR: Generic Exception in generate_ad: {error_message}")
        return jsonify({"error": error_message}), 500

    print(f"DEBUG: Returning JSON response.")
    # Return the generated ad text. image_urls are handled by frontend preview.
    return jsonify({
        'generated_ad': generated_ad,
        'image_urls': [] # No longer saving/serving from server in this flow, frontend previews
    })

def allowed_file(filename):
    ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif'}
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

@app.route('/static/uploads/<filename>')
def uploaded_file(filename):
    print(f"DEBUG: Serving static file: {filename} from {app.config['UPLOAD_FOLDER']}")
    if not os.path.exists(app.config['UPLOAD_FOLDER']):
        print(f"DEBUG ERROR: Upload folder not found at {app.config['UPLOAD_FOLDER']}")
        return "Upload folder not found", 404
    return send_from_directory(app.config['UPLOAD_FOLDER'], filename)

if __name__ == '__main__':
    app.run(debug=True)

