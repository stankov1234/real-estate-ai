# Import necessary libraries
from flask import Flask, request, jsonify, render_template, send_from_directory
import openai
import os
from werkzeug.utils import secure_filename # For safe handling of filenames
import json # To handle JSON responses if needed for structured data

# Initialize the Flask application
# Use template_folder to explicitly specify where HTML templates are located
app = Flask(__name__, template_folder='templates', static_folder='static')

# Define the folder for uploading images
# It's crucial this directory exists and is tracked by Git
UPLOAD_FOLDER = 'static/uploads'
# Ensure the upload folder exists. This is important for local development.
# For Render, ensure 'static/uploads' is committed to your GitHub repo (e.g., with a .gitkeep file inside).
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

# Configure OpenAI API key from environment variables for security
# Make sure to set OPENAI_API_KEY in your Render environment settings
# New way to initialize OpenAI client for openai>=1.0.0
# The API key is automatically picked up from OPENAI_API_KEY environment variable
try:
    client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
    print("DEBUG: OpenAI client initialized successfully.")
except Exception as e:
    print(f"DEBUG ERROR: Failed to initialize OpenAI client: {e}")
    client = None # Set client to None if initialization fails


# Define the application password for authentication
# In a real-world scenario, consider more secure password management (e.g., hashing, database)
APP_PASSWORD = "360estate" # The password for your team

# --- Routes for the application ---

@app.route('/')
def index():
    """
    Renders the login page when the root URL is accessed.
    This is the first page users will see to enter the password.
    """
    return render_template('login.html')

@app.route('/login', methods=['POST'])
def login():
    """
    Handles the login form submission.
    Checks if the entered password matches the APP_PASSWORD.
    """
    password = request.form.get("password")
    if password == APP_PASSWORD:
        # If password is correct, render the main form for generating ads
        return render_template('form.html')
    else:
        # If password is incorrect, re-render the login page with an error message
        return render_template('login.html', error=True)

@app.route('/generate', methods=['POST'])
def generate_ad():
    """
    Handles the ad generation form submission.
    - Saves uploaded images to the UPLOAD_FOLDER.
    - Constructs a detailed prompt for the AI based on form data.
    - Calls OpenAI API (GPT-4) to generate the ad text.
    - Returns the generated ad text and image URLs as a JSON response.
    """
    print("DEBUG: generate_ad route hit!") # Debug print

    # Extract form data
    data = request.form

    # Save uploaded images
    image_files = request.files.getlist('images')
    image_urls = []
    for image in image_files:
        if image and allowed_file(image.filename):
            filename = secure_filename(image.filename)
            path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            try:
                print(f"DEBUG: Attempting to save image to {path}") # Debug print
                image.save(path)
                # Store the URL relative to the static folder for display
                image_urls.append(f'/static/uploads/{filename}')
                print(f"DEBUG: Image saved: {filename}") # Debug print
            except Exception as e:
                print(f"DEBUG ERROR: Failed to save image {filename}: {e}")
                # Optionally, you might want to return an error or skip this image
                pass # Continue processing even if one image fails to save

    # Construct the detailed prompt for the AI based on the provided data
    # This prompt incorporates all the refined phrases and structures we discussed
    prompt = f"""
–°—ä–∑–¥–∞–π —É–Ω–∏–∫–∞–ª–Ω–∞, —É–±–µ–¥–∏—Ç–µ–ª–Ω–∞ –∏ –µ–º–æ—Ü–∏–æ–Ω–∞–ª–Ω–æ –≤—ä–∑–¥–µ–π—Å—Ç–≤–∞—â–∞ –æ–±—è–≤–∞ –∑–∞ –ø—Ä–æ–¥–∞–∂–±–∞ –Ω–∞ –∏–º–æ—Ç, —Å—ä–æ–±—Ä–∞–∑–µ–Ω–∞ —Å Facebook Marketplace. –ò–∑–ø–æ–ª–∑–≤–∞–π –µ–º–æ—Ç–∏–∫–æ–Ω–∏, –∫—Ä–∞—Ç–∫–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∏ –∏ –∏–∑—Ä–∞–∑–∏—Ç–µ–ª–µ–Ω —Å—Ç–∏–ª.

–î–∞–Ω–Ω–∏ –∑–∞ –∏–º–æ—Ç–∞:
üìå –õ–æ–∫–∞—Ü–∏—è: {data.get('location', '–Ω–µ—É—Ç–æ—á–Ω–µ–Ω–∞')}
üí∞ –¶–µ–Ω–∞: {data.get('price', '–Ω–µ—É—Ç–æ—á–Ω–µ–Ω–∞')} ‚Ç¨
üìê –ü–ª–æ—â: {data.get('area', '–Ω–µ—É—Ç–æ—á–Ω–µ–Ω–∞')} –∫–≤.–º
üè¢ –ï—Ç–∞–∂: {data.get('floor', '–Ω–µ—É—Ç–æ—á–Ω–µ–Ω')}
üèóÔ∏è –ì–æ–¥–∏–Ω–∞ –Ω–∞ —Å—Ç—Ä–æ–µ–∂: {data.get('year_built', '–Ω–µ—É—Ç–æ—á–Ω–µ–Ω–∞')}
üí≥ –ú–µ—Å–µ—á–Ω–∞ –≤–Ω–æ—Å–∫–∞: {data.get('installment', '–Ω–µ—É—Ç–æ—á–Ω–µ–Ω–∞')} ‚Ç¨
üõãÔ∏è –û–±–∑–∞–≤–µ–∂–¥–∞–Ω–µ: {data.get('furnishing', '–Ω–µ—É—Ç–æ—á–Ω–µ–Ω–æ')}
üåÑ –ü–∞–Ω–æ—Ä–∞–º–∞: {data.get('panorama', '–Ω–µ—É—Ç–æ—á–Ω–µ–Ω–∞')}
üõó –ê—Å–∞–Ω—Å—å–æ—Ä: {data.get('elevator', '–Ω–µ—É—Ç–æ—á–Ω–µ–Ω')}
üöó –ì–∞—Ä–∞–∂: {data.get('garage', '–Ω–µ—É—Ç–æ—á–Ω–µ–Ω')}
üíº –ï–∫—Å–∫–ª—É–∑–∏–≤–Ω–æ—Å—Ç: {data.get('exclusive', '–Ω–µ—É—Ç–æ—á–Ω–µ–Ω–∞')}
üè¶ –§–∏–Ω–∞–Ω—Å–∏—Ä–∞–Ω–µ: {data.get('financing', '–Ω–µ—É—Ç–æ—á–Ω–µ–Ω–æ')}
üñºÔ∏è –£–Ω–∏–∫–∞–ª–Ω–∏ –ø—Ä–µ–¥–∏–º—Å—Ç–≤–∞: {data.get('unique_features', '–Ω–µ—É—Ç–æ—á–Ω–µ–Ω–∏')}

–û–±—è–≤–∞—Ç–∞ —Ç—Ä—è–±–≤–∞ –¥–∞ –≤–∫–ª—é—á–≤–∞:
1.  **–ó–∞–≥–ª–∞–≤–∏–µ:** –ö—Ä–∞—Ç–∫–æ, —É–¥–∞—Ä–Ω–æ –∏ –ø–æ–¥–∫–∞–Ω–≤–∞—â–æ (–Ω–∞–ø—Ä. "üí• –ö—É–ø–∏ –∑–∞ {data.get('installment')} ‚Ç¨/–º–µ—Å–µ—Ü ‚Äì {data.get('furnishing', '–æ–±–∑–∞–≤–µ–¥–µ–Ω')}, {data.get('panorama', '—Å –ø–∞–Ω–æ—Ä–∞–º–∞')}").
2.  **–û—Å–Ω–æ–≤–µ–Ω —Ç–µ–∫—Å—Ç:**
    * –í—Å—Ç—ä–ø–∏—Ç–µ–ª–µ–Ω –∞–±–∑–∞—Ü, –∫–æ–π—Ç–æ –≥—Ä–∞–±–≤–∞ –≤–Ω–∏–º–∞–Ω–∏–µ—Ç–æ –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤—è –∫–ª—é—á–æ–≤–∏ –ø–æ–ª–∑–∏.
    * –Ø—Å–Ω–æ –∏ –µ–º–æ—Ü–∏–æ–Ω–∞–ª–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—ä–∑–º–æ–∂–Ω–æ—Å—Ç–∏—Ç–µ –∑–∞ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–∞–Ω–µ:
        "‚ú® –¢–æ–∑–∏ –∏–º–æ—Ç –º–æ–∂–µ –¥–∞ –±—ä–¥–µ –∑–∞–∫—É–ø–µ–Ω –Ω–∞ —Ä–∞–∑—Å—Ä–æ—á–µ–Ω–æ –ø–ª–∞—â–∞–Ω–µ —á—Ä–µ–∑ –ë–∞–Ω–∫–æ–≤ –ò–ø–æ—Ç–µ—á–µ–Ω –ö—Ä–µ–¥–∏—Ç —Å –º–µ—Å–µ—á–Ω–∞ –≤–Ω–æ—Å–∫–∞ –æ—Ç {data.get('installment', '–•–•–•')} ‚Ç¨."
        "üîì –ë–µ–∑ –Ω–∞—á–∞–ª–µ–Ω –∫–∞–ø–∏—Ç–∞–ª, –±–µ–∑ –¥–æ–∫–∞–∑–∞–Ω–∏ –¥–æ—Ö–æ–¥–∏ –∏–ª–∏ —Å –≤–ª–æ—à–µ–Ω–∞ –∫—Ä–µ–¥–∏—Ç–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è ‚Äì –Ω–∏–µ —Å—ä–¥–µ–π—Å—Ç–≤–∞–º–µ –∑–∞ —É—Å–ø–µ—à–Ω–æ –±–∞–Ω–∫–æ–≤–æ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–∞–Ω–µ."
        "üìå –§–∏–Ω–∞–Ω—Å–∏—Ä–∞–Ω–µ—Ç–æ –Ω–µ –µ –ø—Ä–µ—á–∫–∞ ‚Äì —Ç–æ –µ —á–∞—Å—Ç –æ—Ç —Ä–µ—à–µ–Ω–∏–µ—Ç–æ."
    * –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞ —Ä–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏ –ø—Ä–µ–¥–∏–º—Å—Ç–≤–∞ –Ω–∞ –∏–º–æ—Ç–∞.
    * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –ª–æ–∫–∞—Ü–∏—è—Ç–∞ –∏ –ø—Ä–µ–¥–∏–º—Å—Ç–≤–∞—Ç–∞ –Ω–∞ –∫–≤–∞—Ä—Ç–∞–ª–∞.
    * –†–∞–∑–¥–µ–ª "–ó–∞—â–æ —Å 360ESTATE?" —Å –∞–∫—Ü–µ–Ω—Ç –≤—ä—Ä—Ö—É –ø—Ä–æ—Ñ–µ—Å–∏–æ–Ω–∞–ª–Ω–∞ –ø–æ–¥–∫—Ä–µ–ø–∞, —Å–∏–≥—É—Ä–Ω–æ—Å—Ç –∏ —É–ª–µ—Å–Ω–µ–Ω–∏–µ.
    * –ü—Ä–∏–∑–∏–≤ –∑–∞ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ç–µ–ª–µ—Ñ–æ–Ω –∑–∞ –≤—Ä—ä–∑–∫–∞: 0896 804 359 –∏ –æ–ø—Ü–∏—è –∑–∞ –ª–∏—á–Ω–æ —Å—ä–æ–±—â–µ–Ω–∏–µ.
3.  **–§–æ—Ä–º–∞—Ç:** –ò–∑–ø–æ–ª–∑–≤–∞–π –µ–º–æ—Ç–∏–∫–æ–Ω–∏, –Ω–æ–≤–∏ —Ä–µ–¥–æ–≤–µ –∏ –∫—Ä–∞—Ç–∫–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∏ –∑–∞ –ª–µ—Å–Ω–∞ —á–µ—Ç–∏–º–æ—Å—Ç.
"""

    generated_ad = "–í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ—Ç–æ –Ω–∞ –æ–±—è–≤–∞—Ç–∞."
    error_message = None

    try:
        # Check if OpenAI client is initialized
        if client is None:
            raise ValueError("OpenAI –∫–ª–∏–µ–Ω—Ç—ä—Ç –Ω–µ –µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω. API –∫–ª—é—á—ä—Ç –º–æ–∂–µ –¥–∞ –ª–∏–ø—Å–≤–∞ –∏–ª–∏ –¥–∞ –µ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω.")

        print(f"DEBUG: OpenAI client is ready.") # Debug print

        # Call OpenAI Chat Completion API using the new syntax (client.chat.completions.create)
        response = client.chat.completions.create( # CORRECTED LINE
            model="gpt-4", # Using GPT-4 as requested
            messages=[
                {"role": "system", "content": "–¢–∏ —Å–∏ –µ–∫—Å–ø–µ—Ä—Ç –ø–æ –∏–º–æ—Ç–Ω–∏ –æ–±—è–≤–∏ –∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥ –∑–∞ –Ω–µ–¥–≤–∏–∂–∏–º–∏ –∏–º–æ—Ç–∏."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.8, # Controls creativity (0.8 is a good balance)
            max_tokens=1200 # Max length of the generated response
        )
        generated_ad = response.choices[0].message.content.strip() # Access content correctly
        print(f"DEBUG: OpenAI Response received. Generated ad length: {len(generated_ad)}") # Debug print

    # Catch specific OpenAI API errors using the correct exception class for newer versions
    except openai.APIError as e: # This should now correctly catch API errors
        error_message = f"AI –≥—Ä–µ—à–∫–∞: –ü—Ä–æ–±–ª–µ–º —Å OpenAI API: {str(e)}. –ú–æ–ª—è, –ø—Ä–æ–≤–µ—Ä–µ—Ç–µ API –∫–ª—é—á–∞ –∏ –ª–∏–º–∏—Ç–∏—Ç–µ —Å–∏."
        print(f"DEBUG ERROR: OpenAI API Error: {error_message}") # Log error for debugging
        return jsonify({"error": error_message}), 500
    except ValueError as e:
        error_message = f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–∞ –≥—Ä–µ—à–∫–∞: {str(e)}"
        print(f"DEBUG ERROR: ValueError: {error_message}") # Log error
        return jsonify({"error": error_message}), 500
    except Exception as e: # Catch any other unexpected errors
        error_message = f"–ù–µ–æ—á–∞–∫–≤–∞–Ω–∞ –≥—Ä–µ—à–∫–∞: {str(e)}"
        print(f"DEBUG ERROR: Generic Exception in generate_ad: {error_message}") # Log any other unexpected errors
        return jsonify({"error": error_message}), 500

    print(f"DEBUG: Returning JSON response. Image URLs count: {len(image_urls)}") # Debug print
    # Return the generated ad text and image URLs as JSON
    return jsonify({
        'generated_ad': generated_ad,
        'image_urls': image_urls
    })

def allowed_file(filename):
    """
    Helper function to validate allowed file extensions for uploads.
    """
    ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif'}
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

# Serve static files (images)
@app.route('/static/uploads/<filename>')
def uploaded_file(filename):
    """
    Route to serve uploaded images.
    """
    print(f"DEBUG: Serving static file: {filename} from {app.config['UPLOAD_FOLDER']}") # Debug print
    # It's good practice to ensure the directory exists before serving to prevent errors
    if not os.path.exists(app.config['UPLOAD_FOLDER']):
        print(f"DEBUG ERROR: Upload folder not found at {app.config['UPLOAD_FOLDER']}")
        return "Upload folder not found", 404
    return send_from_directory(app.config['UPLOAD_FOLDER'], filename)

# Main entry point for the Flask application
# When running locally, this will start the development server
# For production (Render), Gunicorn will handle this part,
# but it's good practice to keep it for local testing.
if __name__ == '__main__':
    app.run(debug=True) # debug=True allows for automatic reloading and error messages
